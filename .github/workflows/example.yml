name: Build

env:
  JAVA_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC"
  GRADLE_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC"
  TERM: xterm-256color
  JDK_CURRENT: 11.0.10
  JDK_LATEST: 15
  CI: "true" # scripts use this and run CAS/Strapi in background.

##########################################################################

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

##########################################################################

jobs:
            
##########################################################################

  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        casVersions:
          - casVersion: 6.3.3
            bootVersion: 2.3.7.RELEASE
          - casVersion: 6.4.0-RC4
            bootVersion: 2.4.5
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JDK_CURRENT }}
      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: "Clone Strapi"
        shell: "bash" 
        run: ./clone_strapi.sh
      - uses: actions/cache@v2
        with:
          path: |
            strapi/node_modules
            puppeteer/node_modules
            strapi/examples/getstarted/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: "Start CAS Server"
        shell: "bash" 
        run: ./run-cas.sh ${{ matrix.casVersions.casVersion }} ${{ matrix.casVersions.bootVersion }}
      - name: "Start Strapi Server"
        shell: "bash" 
        run: ./run-strapi.sh
      - name: "Register Strapi Admin"
        shell: "bash" 
        run: ./register_strapi_admin.sh | jq .
      - name: "Start LDAP (Samba-AD) Server"
        shell: "bash" 
        run: cd ldap && ./run-ad-server.sh
      - name: "Run puppeteer login test"
        shell: "bash" 
        run: |
          cd puppeteer
          ./run.sh casconnect
          grep \"jwt\" testoutput.log | tail -1 | jq .
          ./run.sh casconnectldap
          grep \"jwt\" testoutput.log | tail -1 | jq .          
      - name: "Package Artifacts"
        shell: "bash" 
        run: |
          tar --exclude='cas-server-${{ matrix.casVersions.casVersion }}/.gradle' --exclude='cas-server-${{ matrix.casVersions.casVersion }}/build/overlays' -zcvf  cas-server-${{ matrix.casVersions.casVersion }}.tgz cas-server-${{ matrix.casVersions.casVersion }}
          tar --exclude='strapi/examples/getstarted/node_modules' --exclude='strapi/examples/getstarted/build' --exclude='strapi/examples/getstarted/.cache' -zcvf  strapi-example.tgz strapi/examples/getstarted
      - name: "upload cas server folder"
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: cas-server-${{ matrix.casVersions.casVersion }}
          path: ./cas-server-${{ matrix.casVersions.casVersion }}.tgz
      - name: "upload strapi app folder"
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: strapi-example
          path: ./strapi-example.tgz
      - name: "upload puppeteer screenshots"
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: puppeteer-screenshots
          path: ./puppeteer/*.png
      - name: "upload cas server logs"
        uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: cas-logs-${{ matrix.casVersions.casVersion }}
          path: ./cas-server-${{ matrix.casVersions.casVersion }}/logs/cas*.log
